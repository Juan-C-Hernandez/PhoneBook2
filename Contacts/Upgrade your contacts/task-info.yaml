type: edu
custom_name: stage3
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, String... actions) {\n        if (actualSize != actions.length)\
    \ {\n            return CheckResult.wrong(String.format(\"This test should contain\
    \ %d actions: %s. \" +\n                            \"You should separate your\
    \ actions with an empty line.\",\n                    actions.length,\n      \
    \              String.join(\", \", actions)));\n        } else {\n           \
    \ return null;\n        }\n    }\n\n    @Override\n    public List<TestCase<TestClue>>\
    \ generate() {\n        return List.of (\n            new TestCase<TestClue>()\n\
    \                .setInput(\"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (!output.contains(\"enter action\")) {\n                      \
    \  return new CheckResult(false,\n                            \"I didn't see where\
    \ \\\"Enter action\\\" part in the responsesFromClient\");\n                 \
    \   }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"0 records\")) {\n                \
    \        return new CheckResult(false,\n                            \"No \\\"\
    0 records\\\" part \" +\n                                \"in the responsesFromClient\
    \ in a place where it should be\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"edit\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (!output.contains(\"no records to edit\")) {\n       \
    \                 return new CheckResult(false,\n                            \"\
    No \\\"No records to edit\\\" part \" +\n                                \"in\
    \ the responsesFromClient in a place where it should be\");\n                \
    \    }\n                    return CheckResult.correct();\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"count\\n\" +\n                    \"remove\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"no records to remove\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"No records to remove\\\
    \" part \" +\n                                \"in the responsesFromClient in\
    \ a place where it should be\");\n                    }\n                    return\
    \ CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"count\\n\" +\n                    \"exit\")\n               \
    \ .setAttach(new TestClue(output -> {\n                    output = output.strip().toLowerCase();\n\
    \                    if (output.contains(\"0 records\")) {\n                 \
    \       return new CheckResult(false,\n                            \"Can't add\
    \ the person\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"info\\n\"\
    \ +\n                        \"1\\n\" +\n                    \"exit\")\n     \
    \           .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, \"add\", \"info\", \"\
    exit\");\n                    if (feedback != null) return feedback;\n       \
    \             \n                    String infoBlock = blocks[1];\n          \
    \          if (!infoBlock.contains(\"Name: John\")\n                        ||\
    \ !infoBlock.contains(\"Surname: Smith\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Something wrong with printing user info\");\n                    }\n   \
    \                 return CheckResult.correct();\n                })),\n\n    \
    \        new TestCase<TestClue>()\n                .setInput(\n              \
    \      \"add\\n\" +\n                        \"organization\\n\" +\n         \
    \               \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"info\", \"exit\");\n                    if (feedback != null) return feedback;\n\
    \                    \n                    String infoBlock = blocks[1];\n   \
    \                 if (!infoBlock.contains(\"Organization name: Pizza Shop\")\n\
    \                        || !infoBlock.contains(\"Address: Wall St. 1\")\n   \
    \                     || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Something\
    \ wrong with printing organization info\");\n                    }\n         \
    \           return CheckResult.correct();\n                })),\n\n          \
    \  new TestCase<TestClue>()\n                .setInput(\n                    \"\
    add\\n\" +\n                        \"person\\n\" +\n                        \"\
    John\\n\" +\n                        \"Smith\\n\" +\n                        \"\
    \\n\" +\n                        \"\\n\" +\n                        \"123 456\
    \ 789\\n\" +\n                    \"edit\\n\" +\n                        \"1\\\
    n\" +\n                        \"gender\\n\" +\n                        \"M\\\
    n\" +\n                    \"info\\n\" +\n                        \"1\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith\")\n        \
    \                || !infoBlock.contains(\"Birth date: [no data]\")\n         \
    \               || !infoBlock.contains(\"Gender: M\")\n                      \
    \  || !infoBlock.contains(\"Number: 123 456 789\")\n                        ||\
    \ !infoBlock.contains(\"Time created:\")\n                        || !infoBlock.contains(\"\
    Time last edit:\")) {\n                        return new CheckResult(false,\n\
    \                            \"Editing person gender is not working\");\n    \
    \                }\n                    return CheckResult.correct();\n      \
    \          })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"person\\n\" +\n \
    \                       \"John2\\n\" +\n                        \"Smith2\\n\"\
    \ +\n                        \"\\n\" +\n                        \"\\n\" +\n  \
    \                      \"123 456 789\\n\" +\n                    \"edit\\n\" +\n\
    \                        \"1\\n\" +\n                        \"name\\n\" +\n \
    \                       \"John3\\n\" +\n                    \"info\\n\" +\n  \
    \                      \"1\\n\" +\n                    \"exit\")\n           \
    \     .setAttach(new TestClue(output -> {\n                    String[] blocks\
    \ = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n                    var\
    \ feedback = splitActionsFeedback(blocks.length, \"add\", \"edit\", \"info\",\
    \ \"exit\");\n                    if (feedback != null) return feedback;\n   \
    \                 \n                    String infoBlock = blocks[2];\n      \
    \              if (!infoBlock.contains(\"Name: John3\")\n                    \
    \    || !infoBlock.contains(\"Surname: Smith2\")\n                        || !infoBlock.contains(\"\
    Birth date: [no data]\")\n                        || !infoBlock.contains(\"Gender:\
    \ [no data]\")\n                        || !infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                        || !infoBlock.contains(\"Time created:\")\n\
    \                        || !infoBlock.contains(\"Time last edit:\")) {\n    \
    \                    return new CheckResult(false,\n                         \
    \   \"Editing person name is not working\");\n                    }\n        \
    \            return CheckResult.correct();\n                })),\n\n         \
    \   new TestCase<TestClue>()\n                .setInput(\n                   \
    \ \"add\\n\" +\n                        \"person\\n\" +\n                    \
    \    \"John2\\n\" +\n                        \"Smith2\\n\" +\n               \
    \         \"\\n\" +\n                        \"\\n\" +\n                     \
    \   \"123 456 789\\n\" +\n                    \"edit\\n\" +\n                \
    \        \"1\\n\" +\n                        \"number\\n\" +\n               \
    \         \"321 654 978\\n\" +\n                    \"info\\n\" +\n          \
    \              \"1\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Name: John2\")\n\
    \                        || !infoBlock.contains(\"Surname: Smith2\")\n       \
    \                 || !infoBlock.contains(\"Birth date: [no data]\")\n        \
    \                || !infoBlock.contains(\"Gender: [no data]\")\n             \
    \           || !infoBlock.contains(\"Number: 321 654 978\")\n                \
    \        || !infoBlock.contains(\"Time created:\")\n                        ||\
    \ !infoBlock.contains(\"Time last edit:\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Editing person number\
    \ is not working\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"organization\\\
    n\" +\n                        \"Pizza Shop\\n\" +\n                        \"\
    Wall St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n  \
    \                  \"edit\\n\" +\n                        \"1\\n\" +\n       \
    \                 \"address\\n\" +\n                        \"Wall St 2\\n\" +\n\
    \                    \"info\\n\" +\n                        \"1\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ \"add\", \"edit\", \"info\", \"exit\");\n                    if (feedback !=\
    \ null) return feedback;\n                    \n                    String infoBlock\
    \ = blocks[2];\n                    if (!infoBlock.contains(\"Organization name:\
    \ Pizza Shop\")\n                        || !infoBlock.contains(\"Address: Wall\
    \ St 2\")\n                        || !infoBlock.contains(\"Number: +0 (123) 456-789-9999\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization address is not working\");\n                    }\n           \
    \         return CheckResult.correct();\n                })),\n\n            new\
    \ TestCase<TestClue>()\n                .setInput(\n                    \"add\\\
    n\" +\n                        \"organization\\n\" +\n                       \
    \ \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\n\" +\n         \
    \               \"+0 (123) 456-789-9999\\n\" +\n                    \"edit\\n\"\
    \ +\n                        \"1\\n\" +\n                        \"number\\n\"\
    \ +\n                        \"+0 (123) 456-789-12345\\n\" +\n               \
    \     \"info\\n\" +\n                        \"1\\n\" +\n                    \"\
    exit\")\n                .setAttach(new TestClue(output -> {\n               \
    \     String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n \
    \                   var feedback = splitActionsFeedback(blocks.length, \"add\"\
    , \"edit\", \"info\", \"exit\");\n                    if (feedback != null) return\
    \ feedback;\n                    \n                    String infoBlock = blocks[2];\n\
    \                    if (!infoBlock.contains(\"Organization name: Pizza Shop\"\
    )\n                        || !infoBlock.contains(\"Address: Wall St. 1\")\n \
    \                       || !infoBlock.contains(\"Number: +0 (123) 456-789-12345\"\
    )\n                        || !infoBlock.contains(\"Time created:\")\n       \
    \                 || !infoBlock.contains(\"Time last edit:\")) {\n           \
    \             return new CheckResult(false,\n                            \"Editing\
    \ organization number is not working\");\n                    }\n            \
    \        return CheckResult.correct();\n                }))\n        );\n    }\n\
    \n    @Override\n    public CheckResult check(String reply, TestClue clue) {\n\
    \        try {\n            return clue.callback.apply(reply);\n        }\n  \
    \      catch (Exception ex) {\n            return new CheckResult(false, \"Can't\
    \ check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Contact {
        private String name;
        private String surname;
        private String phoneNumber;

        public Contact(String name, String surname) {
            this.name = name;
            this.surname = surname;
            this.phoneNumber = "";
        }

        public String getName() {
            return name;
        }

        public String getSurname() {
            return surname;
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }

        public void setPhoneNumber(String phoneNumber) {
            String regex = "^\\+?([\\da-zA-Z][ -]?)?(\\([\\da-zA-Z]{2,}\\)([ -][\\da-zA-Z]{2,})*" +
                    "|[\\da-zA-Z]{2,}([ -]\\([\\da-zA-Z]{2,}\\))?([ -][\\da-zA-Z]{2,})*)?$";
            Matcher matcher = Pattern.compile(regex).matcher(phoneNumber);
            this.phoneNumber = matcher.matches() ? phoneNumber : "";
        }

        public boolean hasNumber() {
            return phoneNumber != null && !phoneNumber.equals("");
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(getName()).append(" ").
                    append(getSurname()).append(", ").
                    append(hasNumber() ? getPhoneNumber() : "[no number]");
            return sb.toString();
        }

        public static class Builder {

        }
    }
  learner_created: true
- name: src/contacts/ConsoleHelper.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;

    public class ConsoleHelper {
        private static final ConsoleHelper instance = new ConsoleHelper();
        private Scanner scanner = new Scanner(System.in);

        private ConsoleHelper() {

        }

        public String readString(String msg) {
            System.out.print(msg);
            return scanner.nextLine();
        }

        public int readInt(String msg) {
            System.out.print(msg);
            return Integer.parseInt(scanner.nextLine());
        }

        public static ConsoleHelper getInstance() {
            return instance;
        }

        public void close() {
            scanner.close();
        }
    }
  learner_created: true
- name: src/contacts/Contacts.java
  visible: true
  text: |
    package contacts;

    import java.util.ArrayList;
    import java.util.List;

    public class Contacts {
        private List<Contact> contacts;

        public Contacts() {
            contacts = new ArrayList<>();
        }

        public void addContact(Contact contact) {
            contacts.add(contact);
        }

        public Contact removeContact(int i) {
            return contacts.remove(i);
        }

        public int size() {
            return contacts.size();
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        public void edit(int i, Contact p) {
            contacts.set(i, p);
        }

        public Contact getRecord(int i) {
            return contacts.get(i);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            int i = 1;
            for (Contact p : contacts) {
                sb.append(i).append(". ").append(p).append(System.lineSeparator());
                i++;
            }

            return sb.toString();
        }
    }
  learner_created: true
- name: src/contacts/ContactManager.java
  visible: true
  text: |
    package contacts;

    public class ContactManager {
        private Contacts contacts;
        private ConsoleHelper consoleHelper = ConsoleHelper.getInstance();

        public ContactManager(Contacts contacts) {
            this.contacts = contacts;
        }

        public ContactManager() {
            this(new Contacts());
        }

        public void addContact() {
            String name = consoleHelper.readString("Enter the name: ");
            String surname = consoleHelper.readString("Enter the surname: ");
            String number = consoleHelper.readString("Enter the number");
            Contact newContact = new Contact(name, surname);
            newContact.setPhoneNumber(number);
            contacts.addContact(newContact);
            System.out.println("The record added.");
        }

        public void editContact() {
            if (contacts.isEmpty()) {
                System.out.println("No records to edit!");
            } else {
                listContacts();
                int index = consoleHelper.readInt("Select record: ") - 1;
                if (index >= 0 && index < contacts.size()) {
                    Contact editContact = contacts.getRecord(index);
                    String field = consoleHelper.readString("Select a field (name, surname, number): ");
                    switch (field) {
                        case "name":
                            String newName = consoleHelper.readString("Enter name: ");
                            editContact.setName(newName);
                            break;
                        case "surname":
                            String newSurname = consoleHelper.readString("Enter surname: ");
                            editContact.setSurname(newSurname);
                            break;
                        case "number":
                            String newNumber = consoleHelper.readString("Enter number: ");
                            editContact.setPhoneNumber(newNumber);
                            break;
                    }
                    System.out.println("The record updated!");
                }
            }
        }

        public void removeContact() {
            if (contacts.isEmpty()) {
                System.out.println("No records to remove!");
            } else {
                listContacts();
                int index = consoleHelper.readInt("Select a record: ") - 1;
                if (index >= 0 && index < contacts.size()) {
                    contacts.removeContact(index);
                    System.out.println("The record removed!");
                }
            }
        }

        public void countContacts() {
            System.out.println("The Phone Book has " + contacts.size() + " records.");
        }
        public void listContacts() {
            System.out.println(contacts);
        }
    }
  learner_created: true
- name: src/contacts/Menu.java
  visible: true
  text: |
    package contacts;

    import java.util.Scanner;

    public class Menu {
        private ContactManager contactManager;
        private ConsoleHelper consoleHelper = ConsoleHelper.getInstance();

        public Menu(ContactManager contactManager) {
            this.contactManager = contactManager;
        }

        public void run() {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                String line = consoleHelper.readString("Enter action (add, remove, edit, count, list, exit): ");
                switch (line) {
                    case "add":
                        contactManager.addContact();
                        break;
                    case "remove":
                        contactManager.removeContact();
                        break;
                    case "edit":
                        contactManager.editContact();
                        break;
                    case "count":
                        contactManager.countContacts();
                        break;
                    case "list":
                        contactManager.listContacts();
                        break;
                    case "exit":
                        consoleHelper.close();
                        return;
                    default:
                        System.out.println("Invalid inout");
                }
            }
        }
    }
  learner_created: true
- name: src/contacts/Person.java
  visible: true
  learner_created: true
- name: src/contacts/Organization.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/230/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/43/stages/230/implement">JetBrains
    Academy</a>
  time: Fri, 04 Sep 2020 22:27:41 UTC
record: 3
